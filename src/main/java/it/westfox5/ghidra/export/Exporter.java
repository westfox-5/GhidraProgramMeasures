package it.westfox5.ghidra.export;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import it.westfox5.ghidra.export.impl.JSONExporter;
import it.westfox5.ghidra.measure.MeasuredProgram;
import it.westfox5.ghidra.util.Formatter;
import it.westfox5.ghidra.util.StringUtils;
import it.westfox5.ghidra.util.logger.Logger;

public abstract class Exporter {
	
	public static Path EXPORT_LOCATION;
	static {
		String workingDir = System.getProperty("user.dir");
		EXPORT_LOCATION = Path.of(workingDir, "exports");
	}
	
	/** Mapping of supported export types */ 
	public enum ExportType {
		JSON("json");
		
		private final String ext;
		private ExportType(String ext) {
			this.ext = ext;
		}
		
		public String ext() { 
			return this.ext; 
		}
		
		
		private static final Map<String, ExportType> byNameLookup;
		static {
			byNameLookup = List.of(ExportType.values()).stream().collect(Collectors.toMap(e->e.ext(), Function.identity()));
		}
		public static ExportType getExportTypeByName(String name) {
			return byNameLookup.get(name);
		}
	}

	private final ExportType exportType;
	private Path destPath;
	
	protected Exporter(ExportType exportType) {
		this.exportType = exportType;
		
		initExportDirectory();
	}
	
	
	public static final Exporter get(ExportType exportType) throws ExportException {
		switch(exportType) {
		case JSON:
			return new JSONExporter();
		default:
			break;
		}
		
		throw new ExportException("Cannot instantiate an exporter object for export type: `"+exportType.getClass().getCanonicalName()+"`.");
	}
	
	/** Each `Exporter` must provide his custom format */
	public abstract String getFileContent(List<MeasuredProgram> programs);		
	public abstract void dumpMeasures(MeasuredProgram program, Formatter formatter);
	
	
	private void initExportDirectory() {
		if (!Files.exists(EXPORT_LOCATION)) {
			try {
				Files.createDirectory(EXPORT_LOCATION);
			} catch(IOException e ) {
				throw new RuntimeException(e);
			}
		}
	}
	
	private void validateDestinationPath() throws ExportException {
		if (destPath == null) 
			throw new ExportException("No destination file is provided to the exporter.");
		
		if (exportType == null)
			throw new ExportException("No file extension is provided to the exporter.");
		
		if (StringUtils.isEmpty(exportType.ext()))
			throw new ExportException("Cannot determine file extension for the provided extension `"+exportType.name()+"`.");
		
		if (!destPath.toAbsolutePath().toString().endsWith(exportType.ext()))
			destPath = destPath.resolveSibling(destPath.getFileName() + "." + exportType.ext());
	}

	public File export(Path destination, MeasuredProgram... programs) throws ExportException {
		this.destPath = destination;
		return export(programs);
	}

	public File export(MeasuredProgram... programs) throws ExportException {
		
		if (programs == null) {
			throw new ExportException("No programs to export.");
		}
		
		List<MeasuredProgram> _programs = List.of(programs);
		
		if (destPath == null && _programs.size() == 1) {
			destPath = EXPORT_LOCATION.resolve(_programs.iterator().next().getProgram().getName());
		}
		
		validateDestinationPath();
		
		String sb = getFileContent(_programs);
		if (sb.length() < 1) {
			throw new ExportException("No content was generated by the `"+ getClass().getCanonicalName() + "` implementation of `getFileContent` method");
		}
		
		try {
		// default options are CREATE, TRUNCATE_EXISTING, and WRITE
		// @see https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html#writeString(java.nio.file.Path,java.lang.CharSequence,java.nio.charset.Charset,java.nio.file.OpenOption...)
		Files.writeString(destPath, sb, Charset.forName("UTF-8")); 
		} catch(IOException e) {
			throw new ExportException(e);
		}
		Logger.msgLogger.info(this, "Export location: "+destPath.toAbsolutePath().toString());
		return destPath.toFile();
	}
}