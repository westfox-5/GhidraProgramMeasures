package it.westfox5.ghidra.export;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

import it.westfox5.ghidra.MeasuredProgram;
import it.westfox5.ghidra.util.Formatter;
import it.westfox5.ghidra.util.StringUtils;
import it.westfox5.ghidra.util.logger.Logger;

public abstract class Exporter {
	
	public static Path EXPORT_LOCATION;
	static {
		String workingDir = System.getProperty("user.dir");
		EXPORT_LOCATION = Path.of(workingDir, "exports");
	}
	
	/** Mapping of supported export types */ 
	public enum FileExtension {
		JSON(".json");
		
		private final String ext;
		private FileExtension(String ext) {
			this.ext = ext;
		}
		
		public String ext() { return this.ext; }
		
	}

	protected final List<MeasuredProgram> programs;
	private final FileExtension extension;
	private String filename;
	
	@SafeVarargs
	protected Exporter(FileExtension fileExtension, MeasuredProgram... programs) {
		this.programs = List.of(programs);
		this.extension = fileExtension;
		
		if (this.programs.size() == 1) {
			this.filename = this.programs.iterator().next().getProgram().getName();
		}
		
		initExportDirectory();
	}
	
	
	
	/** Each `Exporter` must provide his custom format */
	public abstract String getFileContent();		
	public abstract void dumpMeasures(MeasuredProgram program, Formatter formatter);
	
	
	private void initExportDirectory() {
		if (!Files.exists(EXPORT_LOCATION)) {
			try {
				Files.createDirectory(EXPORT_LOCATION);
			} catch(IOException e ) {
				throw new RuntimeException(e);
			}
		}
	}
	
	private void validateFilename() throws ExportException {
		if (StringUtils.isEmpty(filename)) 
			throw new ExportException("No file name is provided to the exporter.");
		
		if (extension == null)
			throw new ExportException("No file extension is provided to the exporter.");
		
		if (StringUtils.isEmpty(extension.ext()))
			throw new ExportException("Cannot determine file extension for the provided extension `"+extension.name()+"`.");
	}
	
	private String getFilename() {
		return filename + extension.ext();
	}
		
	public void setFilename(String filename) {
		this.filename = filename;
	}

	public File export(String fileName) throws ExportException {
		setFilename(fileName);
		return export();
	}

	public File export() throws ExportException {
		validateFilename();
		
		String sb = getFileContent();
		if (sb.length() < 1) {
			throw new ExportException("No content was generated by the `"+ getClass().getCanonicalName() + "` implementation of `getFileContent` method");
		}
		
		Path destPath = EXPORT_LOCATION.resolve(getFilename());

		try {
		// default options are CREATE, TRUNCATE_EXISTING, and WRITE
		// @see https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html#writeString(java.nio.file.Path,java.lang.CharSequence,java.nio.charset.Charset,java.nio.file.OpenOption...)
		Files.writeString(destPath, sb, Charset.forName("UTF-8")); 
		} catch(IOException e) {
			throw new ExportException(e);
		}
		Logger.msgLogger.info(this, "Halstead's Measures file path: "+destPath.toAbsolutePath().toString());
		return destPath.toFile();
	}
}